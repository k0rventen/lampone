# templates/deployment.yaml
{{- range .Values.apps }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .name }}
  template:
    metadata:
      labels:
        app: {{ .name }}
    spec:
      containers:
        - name: {{ .name }}
          image: {{ .image }}
          {{- if .env }}
          env:
            {{- toYaml .env | nindent 12 }}
          {{- end }}
          {{- if .volumeMounts }}
          volumeMounts:
            {{- toYaml .volumeMounts | nindent 12 }}
          {{- end }}
        {{- if ( default false .anubis ) }}
        - name: anubis
          image: ghcr.io/techarohq/anubis:latest@sha256:da801311ec5a2c8a6a814c0d7a713aa43551f1a034326a7171b8840751181aed
          imagePullPolicy: Always
          env:
            - name: "TARGET"
              value: "http://localhost:{{ .service }}"
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            runAsNonRoot: true
        {{- end }}

      {{- if .volumes }}
      volumes:
        {{- toYaml .volumes | nindent 8 }}
      {{- end }}
      {{- if .imagePullSecret }}
      imagePullSecrets:
        - name: {{ .imagePullSecret }}
      {{- end }}
---

# svc generation
{{- if .service }}
apiVersion: v1
kind: Service
metadata:
  name: {{ .name }}
spec:
  selector:
    app: {{ .name }}
  ports:
    - protocol: TCP
      name: {{ .service | quote }}
      port: {{ .service }}
      targetPort: {{ .service }}
    {{- if ( default false .anubis ) }}
    - protocol: TCP
      name: "anubis"
      port: 8923
      targetPort: 8923

    {{- end }}
{{- end }}

---
# pvc generation
{{- if .pvc }}
{{- range .pvc }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ . }}
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
---
{{- end }}
{{- end }}

---
{{- if .ingress }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .name }}
spec:
  ingressClassName: traefik
  rules:
  - host: {{ .ingress.domain }}
    http:
      paths:
      - backend:
          service:
            name: {{ .name }}
            port:
              number: {{ .service }}
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - {{ .ingress.domain }}
---
{{- if ( default false .ingress.public ) }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .name }}-tunnel
spec:
  ingressClassName: traefik-tunnel
  rules:
  - host: {{ .ingress.domain }}
    http:
      paths:
      - backend:
          service:
            name: {{ .name }}
            port:
              number: {{ ternary "8923" .service (default false .anubis) }}
        path: /
        pathType: Prefix
{{- end }}
{{- end }}
{{- end }}

---



# configmap generation
{{- range $name, $data := .Values.configmaps }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $name }}
data:
  {{- range $key, $value := $data }}
  {{ $key }}: |
    {{- $value | nindent 4 }}
  {{- end }}

---
{{- end }}
